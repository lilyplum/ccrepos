const fs = require('fs');
const { EOL } = require('os');
const { displayInventory, addToInventory, removeFromInventory, printTable, importInventory, exportInventory } = require("./gameInventory");

// DO NOT EDIT THIS FILE!
// This file contains tests to check if your code is working correctly.
// Run this file to check whether you have a good solution!
// (note: passing all tests does not mean that your code is correct)

test('displayInventory', () => {
    const _inventory = { 'rope': 1, 'torch': 6 }
    const expectedOutput = [["rope: 1"], ["torch: 6"]]
    const consoleLogMock = jest.spyOn(console, 'log').mockImplementation();
    try {
        displayInventory(_inventory)
        expect(consoleLogMock.mock.calls).toEqual(expectedOutput);
    } finally {
        consoleLogMock.mockRestore();
    }
})

test('printTable', () => {
    const _inventory = { 'rope': 1, 'torch': 6 }
    const expectedOutput = [
        ["-----------------"],
        ["item name | count"],
        ["-----------------"],
        ["     rope |     1"],
        ["    torch |     6"],
        ["-----------------"]
    ]
    const consoleLogMock = jest.spyOn(console, 'log').mockImplementation();
    try {
        printTable(_inventory)
        expect(consoleLogMock.mock.calls).toEqual(expectedOutput);
    } finally {
        consoleLogMock.mockRestore();
    }

})

test('printTableCountAsc', () => {
    const _inventory = { 'rope': 1, 'torch': 6, 'blanket': 3 }
    const expectedOutput = [
        ["-----------------"],
        ["item name | count"],
        ["-----------------"],
        ["     rope |     1"],
        ["  blanket |     3"],
        ["    torch |     6"],
        ["-----------------"],
    ]
    const consoleLogMock = jest.spyOn(console, 'log').mockImplementation();
    try {
        printTable(_inventory, "count,asc")
        expect(consoleLogMock.mock.calls).toEqual(expectedOutput);
    } finally {
        consoleLogMock.mockRestore();
    }

})

test('printTableCountDesc', () => {
    const _inventory = { 'rope': 1, 'torch': 6, 'blanket': 3 }
    const expectedOutput = [
        ["-----------------"],
        ["item name | count"],
        ["-----------------"],
        ["    torch |     6"],
        ["  blanket |     3"],
        ["     rope |     1"],
        ["-----------------"],
    ]
    const consoleLogMock = jest.spyOn(console, 'log').mockImplementation();
    try {
        printTable(_inventory, "count,desc")
        expect(consoleLogMock.mock.calls).toEqual(expectedOutput);
    } finally {
        consoleLogMock.mockRestore();
    }
})

test('addSingleItem', () => {
    const _inventory = { 'rope': 1, 'torch': 6 }
    const addedItems = ['torch']
    addToInventory(_inventory, addedItems)
    expect(_inventory).toEqual({ 'rope': 1, 'torch': 7 })
})

test('addMultipleItems', () => {
    const _inventory = { 'rope': 1, 'torch': 6 }
    const addedItems = ['torch', 'torch', 'torch']
    addToInventory(_inventory, addedItems)

    expect(_inventory).toEqual({ 'rope': 1, 'torch': 9 })
})

test('removeSingleItem', () => {
    const _inventory = { 'rope': 1, 'torch': 6 }
    const removedItems = ['rope']
    removeFromInventory(_inventory, removedItems)

    expect(_inventory).toEqual({ 'torch': 6 })
})

test('removeMultipleItems', () => {
    const _inventory = { 'rope': 1, 'torch': 6 }
    const removedItems = ['torch', 'torch', 'torch']
    removeFromInventory(_inventory, removedItems)

    expect(_inventory).toEqual({ 'rope': 1, 'torch': 3 })
})

test('importInventory', () => {
    const _inventory = { 'rope': 1, 'torch': 6 }
    importInventory(_inventory, "test_inventory.csv")

    expect(_inventory).toEqual({
        'rope': 1,
        'torch': 6,
        'battleaxe': 1,
        'dagger': 3,
        'gold coin': 1
    })
})

test('importInventoryCatchesFilenotfounderror', () => {
    const _inventory = { 'rope': 1, 'torch': 6 }
    const expectedOutput = [["File 'no_such_file.csv' not found!"]]
    const consoleErrorMock = jest.spyOn(console, 'error').mockImplementation();

    try {
        importInventory(_inventory, "no_such_file.csv")
        expect(consoleErrorMock.mock.calls).toEqual(expectedOutput);
    } finally {
        consoleErrorMock.mockRestore();
    }

})

test('exportInventory', () => {
    exportInventory({ 'dagger': 3, 'gold coin': 1, "battleaxe": 1 }, "test_inventory_export.csv")
    const row = fs.readFileSync("test_inventory_export.csv", 'utf8')
        .split(EOL)
        .map(line => line.split(",").sort())
    const expected = ["dagger", "gold coin", "battleaxe", "dagger", "dagger"]
        .sort()
    expect(expected).toEqual(row[0])
})

test('exportInventoryCatchesPermissionerror', () => {
    const _inventory = { 'rope': 1, 'torch': 6 }
    const expectedOutput = [["You don't have permission creating file '/nopermission.csv'!"]]
    const consoleErrorMock = jest.spyOn(console, 'error').mockImplementation();
    try {
        exportInventory(_inventory, "/nopermission.csv")
        expect(consoleErrorMock.mock.calls).toEqual(expectedOutput);
    } finally {
        consoleErrorMock.mockRestore();
    }
})
